version: '3'

services:
    storagedb:
        image: postgres:14.2-alpine
        container_name: storage
        ports:
        - 5430:5432
        volumes:
        - ../storage_data:/var/lib/postgresql/data/pg_data
        - ./sql/create_storagedb.sql:/docker-entrypoint-initdb.d/create_storagedb.sql
        environment:
            POSTGRES_PASSWORD: postgres
            POSTGRES_USER: postgres
            POSTGRES_DB: storage
            PGDATA: /var/lib/postgresql/data/pg_data
        restart: always

    dbmeta:
        image: postgres:14.2-alpine
        container_name: metadata_db
        ports:
        - 5434:5432
        volumes:
        - ../meta_data/metadata:/var/lib/postgresql/data/pg_data
        - ./sql/create_metadata.sql:/docker-entrypoint-initdb.d/create_metadata.sql
        environment:
            POSTGRES_PASSWORD: postgres
            POSTGRES_USER: postgres
            POSTGRES_DB: metadata
            PGDATA: /var/lib/postgresql/data/pg_data
        restart: always

    song-services:
        build: ./SongService
        image: songservice
        container_name: song_services_container
        ports:
            - 8081:8081
        environment:
            EUREKA_SERVICE_URL: 'http://eureka:8761'
            KAFKA_SERVICE_URL: 'http://kafka:9092'
        depends_on:
            - dbmeta
            - eureka
            - kafka
            - mykafka
        networks:
            - app-eureka

    parser:
        build: ./ResourceProcessor
        image: processor
        container_name: proc_container
        ports:
            - 8083:8083
        environment:
            EUREKA_SERVICE_URL: 'http://eureka:8761'
            KAFKA_SERVICE_URL: 'http://kafka:9092'
        restart: always
        depends_on:
            - eureka
            - kafka
            - mykafka
        networks:
            - app-eureka

    storageservice:
        build: ./StorageService
        image: storageserviceimage
        container_name: storage_container
        ports:
            - 8089:8089
        environment:
            EUREKA_SERVICE_URL: 'http://eureka:8761'
            KAFKA_SERVICE_URL: 'http://kafka:9092'
        depends_on:
            - storagedb
            - eureka
            - kafka
            - mykafka
        networks:
            - app-eureka

#     gateway:
#       build: ./CloudGateway
#       ports:
#         - 8088:8088

    resourse-service:
        build: ./ResourceService
        container_name: resourse_container
        ports:
            - 8080:8080
        environment:
            EUREKA_SERVICE_URL: 'http://eureka:8761'
            KAFKA_SERVICE_URL: 'http://kafka:9092'
            LOCAL_STACK_URL: 'http://localstack:4566'
            INFLUXDB_URL: 'http://influxdb:8086'
        depends_on:
            - eureka
            - kafka
            - mykafka
            - localstack
        networks:
            - app-eureka

    mykafka:
        build: ./Kafka
        image: kafka
        container_name: kafka_container_topic
        ports:
            - 9094:9094
        restart: always
        environment:
            KAFKA_ZOOKEEPER_CONNECT: 'http://zookeeper:2181'
            KAFKA_CONNECT_URL: 'http://kafka:9092'
        depends_on:
              - zookeeper
              - kafka
        networks:
              - app-tier

    eureka:
        image: springcloud/eureka
        container_name: eureka_container
        ports:
            - 8761:8761
        restart: always
        networks:
            - app-eureka

    kafka:
        image: bitnami/kafka:3.1
        container_name: kafka_container
        ports:
            - 9092:9092
            - 9093:9093
        networks:
            - app-tier
        volumes:
            - ../kafka_data:/var/lib/kafka/data/kafka_data
        depends_on:
            - zookeeper
        environment:
              KAFKA_BROKER_ID: 1
              KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#               KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092
#               KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
#               KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
#               KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
              ALLOW_PLAINTEXT_LISTENER: 'true'

#             - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT: PLAINTEXT,EXTERNAL:PLAINTEXT
#             - KAFKA_CFG_LISTENERS=CLIENT: //:9092,EXTERNAL://:9093
#             - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
#             - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT

    zookeeper:
        image: 'bitnami/zookeeper:latest'
        ports:
          - 2181:2181
        networks:
            - app-tier
        environment:
          - ALLOW_ANONYMOUS_LOGIN=yes

    filebeat:
        build: ./LogerService/filebeat
        image: filebeat

    elk:
        image: sebp/elk
        ports:
          - "5601:5601" #kibana
          - "9200:9200" #elastic
          - "5044:5044" #logstash

    localstack:
        container_name: localstack
        image: localstack/localstack:latest
        environment:
        - DEBUG=1
        - USE_SSL=0
        - AWS_CBOR_DISABLE=1
        - DOCKER_HOST=unix:///var/run/docker.sock
        - HOSTNAME=localstack
        - SERVICES=s3
        - AWS_DEFAULT_REGION=us-east-1
        ports:
        - '4566-4583:4566-4583'
        volumes:
        - ${TEMPDIR:-/tmp/localstack}:/tmp/localstack
        - /var/run/docker.sock:/var/run/docker.sock
        - ./script/localstack/s3/init-s3-bucket.sh:/docker-entrypoint-initaws.d/init-s3-bucket.sh

#     influxdb:
#         image: influxdb
#         ports:
#             - 8086:8086
#         environment:
#             DOCKER_INFLUXDB_INIT_USERNAME: influxdbname
#             DOCKER_INFLUXDB_INIT_PASSWORD: influxdbpass
#             DOCKER_INFLUXDB_INIT_ORG: influxdborg
#             DOCKER_INFLUXDB_INIT_BUCKET: influxdbbucket

networks:
  app-tier:
    driver: bridge
  app-eureka:
    driver: bridge
  dbmeta:
    driver: bridge
  storage:
    driver: bridge